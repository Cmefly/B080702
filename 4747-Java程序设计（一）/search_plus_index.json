{"./":{"url":"./","title":"前言","keywords":"","body":"前言 学科信息 4747-Java语言基础 保持学习，为了不被遗忘。 参加了一次19年10月份的考试，还不知结果，但感觉能过呢！ "},"BasicLanguageForJava.html":{"url":"BasicLanguageForJava.html","title":"Java语言特点","keywords":"","body":" 第一章 Java语言基础 [toc] Java语言特点 Java语言主要有以下特点： 强类型：强制约束程序员必须遵守更多的编程规定，编译器能检测程序中尽可能多的错误。 编译和解释：用Java编写的源程序在计算机上运行必须经过编译和解释执行两个阶段。编译程序先将Java源程序翻译成与机器无关的字节码（bytecode），而不是其他的编译程序将源码翻译成特定计算机的机器代码。运行时，由Java虚拟机（JVM）中的Java解释器负责将字节码文件解释成为特定计算机对应的机器码进行运行。 自动无用内存回收功能：垃圾回收器（garbage collector）可以自动回收程序不再使用的内存，避免程序遗漏会重复释放内存。 面向对象 全平台：可移植性，“一次编程，到处运行”。可移植性源于两方面： Java的编译和解释的特征（Java虚拟机） Java采用基于国际标准的数据类型，在任何平台上都可以保持一致 安全性：取消指针，避免因指针使用不挡致使程序访问到不该访问的内存空间；提供数组下标检测机制，防止程序访问越界内存；严格的编译检查：在解释执行前，对字节码文件做检查，防止被恶意改动的字节码文件被解释执行破坏系统；浏览器下载的小应用不允许访问本地文件，防止其破坏本地文件。 分布式计算 多线程：Java的运行环境采用多线程实现。Java语言提供语言级多线程支持，用Java语言能直接编写多线程程序。 两种类型的Java程序 小应用程序（Applet） 需要嵌入网页，当网页被浏览时，在浏览器中运行，运行过程中受到严格的安全限制。 必须定义为 java.applet.Applet 类的子类，而不必定义 main() 方法。 应用程序 独立运行，不嵌入网页，无限制 不需要定义为 java.applet.Applet 的子类，但是必须在一个类中定义 main() 方法。 注释 方便程序阅读的文字内容 行注释： // 需要注释内容 块注释： / 需要注释内容 / 文档注释： /* 需要注释内容 / Java程序的开发过程 graph TB a[编写程序源代码.java文件]-->b[Java编译器] b--编译-->c[字节码.class文件] c--Applet-->d[由浏览器执行] c--应用程序-->e[由Java解释器执行] 通常在JDK目录下有bin、demo、lib、jre等子目录，其中bin目录保存了javac（编译器）、java（解释器）、jdb（调试器）、appletviewer（java Applet解释器）等命令文件 Java的字符集合标识符 字符集：Java语言使用Unicode字符集，字符采用双字节表示方式，共有65535个字符，最前面的128个字符与标准的ASCII字符一致，包括： 数字字符10个（0~9） 英文大小写字母各26个（A~Z,a~z） 下划线（_）、美元符号（$） 文字字符（汉字，日文片假名、平假名，朝鲜文字等） 其他用于构成特殊符号的字符集 标识符：可以用来标识文件名、变量名、类型、接口名和成员方法名等，其构造规则如下： 标识符由英文字母、下划线、美元、文字和数字组成 首字母必须是小写字母，其后单词的首字母大写，其余皆小写 且长度不能超过255个字符 方法名采用动宾结构，例如：getStudentByName 类名用名词，书写同变量名，例如：Student 包名所有字母都小写，例如：chapter01 除去关键字：false、true和null 所有标识符都是区分大小写的 关键字：是Java语言保留的一些英文单词，具有特殊的含义，例如：public、static、class等，具有特殊用途，不能作为标识符使用。 转义字符： \\n 换行 \\f 换页 \\t 制表-作用相当于Tab键 \\b 退格-作用相当于Back Space键 \\r 表示接受键盘输入-作用等同于回车键 \\ \\表示单斜杠 基本数据类型： 布尔型（boolean） 8位 1个字节（true 或 false） 字符型（char） 16位 2字节 字节型（byte） 8位 1字节 短整型（short） 16位 2字节 整数型（int） 32位 4字节 长整型（long） 64位 8字节 单精度浮点型（float） 32位 4字节 双精度浮点型（double）64位 8字节 引用数据类型： 数组 字符串 Java直接量：直接显式地表示基本数据类型数据、字符串（String）值和空引用值（null）的表达式，而且在该表达式中不含有运算。比如： 布尔（boolean）直接量：（有且仅有）true 和 false 字符（char）直接量：'a'、'6'、'猫'、'\\u0061'、'\\n'等 整型（byte、sort、int）直接量：-24、2442、0x56ab等 长整型（long）直接量：-27L、223L、0x56abL等 单精度浮点数（float）直接量：1.5f、2.2f等 双精度浮点数（double）直接量：1.5、2.2D等 字符串（String）直接量：\"你好\"、\"hello\"等 引用数据类型直接量：null 变量： 在计算机内部对应一个存储单元，而且总是具有某种数据类型：基本数据类型或引用数据类型 每个变量都有：名字、类型、一定大小的存储单元以及值 变量总是具有与其数据类型对应的值： 基本数据类型：布尔值或数值 引用数据类型：引用值-用来指向某个具体的对象。注意如果是null则不指向任何对象 使用前必须先定义该变量，而且一般要求先初始化，例如： int studentNumber; //定义单个变量 studentNumber=30; //给变量赋值 double velocity,distance; //定义多个变量 int studentNumber=30; //声明并赋初始值 数据类型 基本概念 数据类型在计算机语言里面，是对内存位置的一个抽象表达方式，可以理解为针对内存的一种抽象的表达方式。接触每种语言的时候，都会存在数据类型的认识，有复杂的、简单的，各种数据类型都需要在学习初期去了解，Java是强类型语言，所以Java对于数据类型的规范会相对严格。数据类型是语言的抽象原子概念，可以说是语言中最基本的单元定义，在Java里面，本质上讲将数据类型分为两种：基本类型和引用数据类型。 基本类型：简单数据类型是不能简化的、内置的数据类型、由编程语言本身定义，它表示了真实的数字、字符和整数。 byte：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0 short：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0 int：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0 long：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L float：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0 double：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0 char：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空 boolean：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false 引用数据类型：Java语言本身不支持C++中的结构（struct）或联合（union）数据类型，它的复合数据类型一般都是通过类或接口进行构造，类提供了捆绑数据和方法的方式，同时可以针对程序外部进行信息隐藏。 数组、字符串 内存关系及存储 关系：在Java中，每个存放数据的变量都是有类型的，如： char ch； float x； int a,b,c； ch是字符型的，就会分配到2个字节内存。不同类型的变量在内存中分配的字节数不同，同时存储方式也是不同的。 所以给变量赋值前需要先确定变量的类型，确定了变量的类型，即确定了数据需分配内存空间的大小，数据在内存的存储方式。 存储： 基本数据类型的存储原理：所有的简单数据类型不存在“引用”的概念，基本数据类型都是直接存储在内存中的内存栈上的，数据本身的值就是存储在栈空间里面，而Java语言里面八种数据类型是这种存储模型； 引用类型的存储原理:引用类型继承于Object类（也是引用类型）都是按照Java里面存储对象的内存模型来进行数据存储的，使用Java内存堆和内存栈来进行这种类型的数据存储，简单地讲，“引用”是存储在有序的内存栈上的，而对象本身的值存储在内存堆上的； 两种数据类型的区别 基本数据类型和引用类型的区别主要在于基本数据类型是分配在栈上的，而引用类型是分配在堆上的（需要java中的栈、堆概念） 不论是基本数据类型还是引用类型，他们都会先在栈中分配一块内存，对于基本类型来说，这块区域包含的是基本类型的内容；而对于对象类型来说，这块区域包含的是指向真正内容的指针，真正的内容被手动的分配在堆上。 END "}}